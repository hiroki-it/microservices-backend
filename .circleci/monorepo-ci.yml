version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  github-cli: circleci/github-cli@2.0.0

parameters:
  account:
    type: boolean
    default: false
  customer:
    type: boolean
    default: false
  orchestrator:
    type: boolean
    default: false
  order:
    type: boolean
    default: false

executors:
  # イメージのビルドの実行環境を提供します．
  build_and_push_executor:
    parameters:
      service_name:
        type: enum
        enum: [ "account", "customer", "orchestrator", "order" ]
      vendor_name:
        type: enum
        enum: [ "fastapi", "gin", "lumen", "nginx" ]
    machine:
      image: ubuntu-2004:202107-02
    environment:
      SERVICE_NAME: << parameters.service_name >>
      VENDOR_NAME: << parameters.vendor_name >>
  # GitOpsの実行環境を提供します．
  create_pull_request_for_gitops_executor:
    parameters:
      service_name:
        type: enum
        enum: [ "account", "customer", "orchestrator", "order" ]
      vendor_name:
        type: enum
        enum: [ "fastapi", "gin", "lumen", "nginx" ]
    docker:
      - image: cimg/base:2024.09
    environment:
      SERVICE_NAME: << parameters.service_name >>
      VENDOR_NAME: << parameters.vendor_name >>

commands:
  # 環境変数を準備します．
  setup_env_files:
    steps:
      - run:
          name: Copy env file
          # NOTE: 移動するディレクトリを環境変数で設定するため，working_directoryオプションは用いない．
          command: |
            set -xe
            cd ./src/${SERVICE_NAME}
            cp .env.example .env

  # docker-compose.ymlを検証します．
  validate_docker_compose_yml:
    steps:
      - run:
          name: Docker compose config
          # NOTE: 移動するディレクトリを環境変数で設定するため，working_directoryオプションは用いない．
          command: |
            set -xe
            cd ./src/${SERVICE_NAME}
            docker-compose config

  # イメージをビルドします．
  build_image:
    steps:
      - run:
          name: Docker compose build
          # NOTE: 移動するディレクトリを環境変数で設定するため，working_directoryオプションは用いない．
          command: |
            set -xe
            cd ./src/${SERVICE_NAME}
            docker-compose build

  # dockerイメージをプッシュします．
  push_image:
    steps:
      - aws-cli/install:
          version: "2.2.5"
      - run:
          name: Docker login
          command: |
            source ./ops/export_envs.sh
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL}
      - run:
          name: Docker push
          command: |
            source ./ops/export_envs.sh
            docker tag ${SERVICE_NAME}-${VENDOR_NAME}:latest ${AWS_ECR_ACCOUNT_URL}/${SERVICE_NAME}-${VENDOR_NAME}-repository:${CIRCLE_SHA1}
            docker push ${AWS_ECR_ACCOUNT_URL}/${SERVICE_NAME}-${VENDOR_NAME}-repository:${CIRCLE_SHA1}

jobs:
  # accountサービスのビルドを実行します．
  build_and_push_account:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - validate_docker_compose_yml
      - build_image
      - push_image

  # accountサービスのビルドを実行します．
  build_and_push_customer:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - validate_docker_compose_yml
      - build_image
      - push_image

  # orchestratorサービスのビルドを実行します．
  build_and_push_orchestrator:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - validate_docker_compose_yml
      - build_image
      - push_image

  # orderサービスのビルドを実行します．
  build_and_push_order:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - validate_docker_compose_yml
      - build_image
      - push_image

  # GitOpsのため，microservices-manifestsリポジトリにプルリクエストを作成します．
  create_pull_request_for_gitops:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - github-cli/setup
      - github-cli/clone:
          repo: git@github.com:hiroki-it/microservices-manifests.git
      # yqコマンドでマニフェストファイルを編集します．
      # @see https://github.com/mikefarah/yq
      - run:
          name: Edit manifest file
          command: |
            wget https://github.com/mikefarah/yq/releases/download/v4.22.1/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
            yq e \
              -i '.kubernetes.image."'${SERVICE_NAME}'"."'${VENDOR_NAME}'" |="'${CIRCLE_SHA1:0:7}'"' ./values/prd.yaml
      # microservices-backendリポジトリに登録したユーザーキーをCI環境内に作成します．
      # @see https://circleci.com/docs/ja/2.0/add-ssh-key/#adding-ssh-keys-to-a-job
      - add_ssh_keys:
          fingerprints:
            - ${SSH_KEY_FINGERPRINT}
      - run:
          name: Git config
          command: |
            git config --global user.email "hasegawafeedshop@gmail.com"
            git config --global user.name "microservices-backend-circleci"
            git remote set-url --push origin git@github.com:hiroki-it/microservices-manifests.git
      - run:
          name: Git commit & push manifest file
          command: |
            git checkout -b release/${SERVICE_NAME}-${VENDOR_NAME}-${CIRCLE_SHA1:0:7}
            git add ./values
            git commit -m "release ${CIRCLE_SHA1:0:7} by GitOps"
            git push origin HEAD
      - run:
          name: Git create pull request for GitOps
          command: |
            gh pr create \
              -t "GitOpsによるリリース" \
              -b "[microservices-backendリポジトリのリリース](https://github.com/hiroki-it/microservices-backend/commit/${CIRCLE_SHA1:0:7}) のため、マニフェストファイルのイメージのタグを更新します。"

workflows:
  # accountワークフロー
  account:
    when: << pipeline.parameters.account >>
    jobs:
      - build_and_push_account:
          name: build_and_push_account
          exr:
            name: build_and_push_executor
            service_name: account
            vendor_name: gin
          filters:
            branches:
              only: main
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_account
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: account
            vendor_name: gin
          requires:
            - build_and_push_account

  # customerワークフロー
  customer:
    when: << pipeline.parameters.customer >>
    jobs:
      - build_and_push_customer:
          name: build_and_push_customer
          exr:
            name: build_and_push_executor
            service_name: customer
            vendor_name: fastapi
          filters:
            branches:
              only: main
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_customer
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: customer
            vendor_name: fastapi
          requires:
            - build_and_push_customer

  # orchestratorワークフロー
  orchestrator:
    when: << pipeline.parameters.orchestrator >>
    jobs:
      - build_and_push_orchestrator:
          name: build_and_push_orchestrator
          exr:
            name: build_and_push_executor
            service_name: orchestrator
            vendor_name: fastapi
          filters:
            branches:
              only: main
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_orchestrator
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: orchestrator
            vendor_name: fastapi
          requires:
            - build_and_push_orchestrator

  # orderワークフロー
  order:
    when: << pipeline.parameters.order >>
    jobs:
      # lumen
      - build_and_push_order:
          name: build_and_push_order_lumen
          exr:
            name: build_and_push_executor
            service_name: order
            vendor_name: lumen
          filters:
            branches:
              only: main
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_order_lumen
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: order
            vendor_name: lumen
          requires:
            - build_and_push_order_lumen
      # nginx
      - build_and_push_order:
          name: build_and_push_order_nginx
          exr:
            name: build_and_push_executor
            service_name: order
            vendor_name: nginx
          filters:
            branches:
              only: main
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_order_nginx
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: order
            vendor_name: nginx
          requires:
            - build_and_push_order_nginx
